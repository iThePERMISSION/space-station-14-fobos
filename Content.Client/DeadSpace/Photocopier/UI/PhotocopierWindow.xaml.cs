// Мёртвый Космос, Licensed under custom terms with restrictions on public hosting and commercial use, full text: https://raw.githubusercontent.com/dead-space-server/space-station-14-fobos/master/LICENSE.TXT

using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared.DeadSpace.Photocopier;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.DeadSpace.Photocopier.UI;

[GenerateTypedNameReferences]
public sealed partial class PhotocopierWindow : FancyWindow
{
    private IPrototypeManager _protoManager;

    public event Action<ProtoId<PaperworkFormPrototype>>? FormButtonPressed;
    public event Action<int, PhotocopierMode>? PrintButtonPressed;
    public event Action? CopyModeButtonPressed;
    public event Action? PrintModeButtonPressed;

    private readonly List<PhotocopierFormCategory> _categories = [];

    private PhotocopierFormCategory? _category;
    private PhotocopierMode _mode;

    private HashSet<PhotocopierFormCategory> _allowedFormCategories = [];
    private bool _wasEmagged;

    private int _tonerLeft;
    private int _maxTonerAmount;

    public PhotocopierWindow(IPrototypeManager protoManager)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _protoManager = protoManager;

        Amount.SetButtons(new List<int> { -2, -1 }, new List<int> { 1, 2 });
        Amount.IsValid = n => n > 0 && n < 7;

        PrintButton.OnPressed += _ => PrintButtonPressed?.Invoke(Amount.Value, _mode);
        PrintButton.OnPressed += _ => PrintButton.Disabled = true;
        CopyModeButton.OnPressed += _ => CopyModeButtonPressed?.Invoke();
        PrintModeButton.OnPressed += _ => PrintModeButtonPressed?.Invoke();

        SearchBar.OnTextChanged += OnSearchBarTextChanged;
    }

    public void UpdateState(PhotocopierUiState state)
    {
        _mode = state.Mode;
        _allowedFormCategories = state.AllowedFormCategories;
        _wasEmagged = state.WasEmagged;
        _tonerLeft = state.TonerLeft;
        _maxTonerAmount = state.MaxTonerAmount;

        PrintButton.Disabled = !state.CanPrint;
        TonerCounter.Text = _tonerLeft + "/" + _maxTonerAmount;

        TonerAmount.MaxValue = _maxTonerAmount;
        TonerAmount.Value = _tonerLeft;

        if (state.Mode == PhotocopierMode.Copy)
        {
            CopyModeButton.Pressed = true;
            PrintModeButton.Pressed = false;
            if (!state.IsPaperInserted)
                PrintButton.Disabled = true;
        }
        if (state.Mode == PhotocopierMode.Print)
        {
            CopyModeButton.Pressed = false;
            PrintModeButton.Pressed = true;
            if (state.ChosenForm == null)
                PrintButton.Disabled = true;
        }

        PopulateCategories();
        PopulateForms();
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        PopulateForms();
    }

    public IEnumerable<PaperworkFormPrototype> PaperworkFormPrototypes => _protoManager.EnumeratePrototypes<PaperworkFormPrototype>();

    public void PopulateForms()
    {
        PaperworkForms.RemoveAllChildren();
        var forms = PaperworkFormPrototypes.ToList();
        forms.Sort((x, y) =>
            string.Compare(x.Name, y.Name, StringComparison.CurrentCultureIgnoreCase));

        var search = SearchBar.Text.Trim().ToLowerInvariant();
        foreach (var prototype in forms)
        {
            if (search.Length == 0 && _category == null ||
                search.Length != 0 && Loc.GetString(prototype.Name).ToLowerInvariant().Contains(search) ||
                search.Length == 0 && _category != null && prototype.Category.Equals(_category))
            {
                if (_categories.Contains(prototype.Category))
                {
                    var button = new Button();
                    button.AddStyleClass("OpenLeft");
                    button.Text = Loc.GetString(prototype.Name);
                    button.ToggleMode = false;
                    button.OnPressed += _ => FormButtonPressed?.Invoke(prototype.ID);
                    PaperworkForms.AddChild(button);
                }
            }
        }
    }

    public void PopulateCategories()
    {
        _categories.Clear();
        PaperworkCategories.DisposeAllChildren();

        foreach (var prototype in PaperworkFormPrototypes)
        {
            if (_categories.Contains(prototype.Category))
                continue;

            if (_wasEmagged)
            {
                _categories.Add(prototype.Category);
                continue;
            }

            if (_allowedFormCategories.Contains(prototype.Category))
                _categories.Add(prototype.Category);
        }

        _categories.Sort();

        foreach (var str in _categories)
        {
            var button = new Button();
            button.AddStyleClass("OpenRight");
            button.Text = Loc.GetString("photocopier-ui-categorie-title-" + str.ToString());
            button.ToggleMode = false;
            button.OnPressed += args => OnCategorySelected(args, str);
            PaperworkCategories.AddChild(button);
        }
    }

    public void OnCategorySelected(BaseButton.ButtonEventArgs _, PhotocopierFormCategory str)
    {
        _category = str;
        PopulateForms();
    }
}
